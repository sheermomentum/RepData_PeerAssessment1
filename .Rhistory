rankhospital("AL", "heart attack", 3)
source('~/coursera-R/rankhospital.R')
rankhospital("AL", "heart attack", 3)
source('~/coursera-R/rankhospital.R')
rankhospital("AL", "heart attack", 3)
source('~/coursera-R/rankhospital.R')
source('~/coursera-R/rankhospital.R')
rankhospital("AL", "heart attack", 3)
source('~/coursera-R/rankhospital.R')
rankhospital("AL", "heart attack", 3)
R.home()
install.packages("RMySql")
install.packages("RMySQL")
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
install.packages("RMySql")
install.packages("RMySQL")
ucscDb<-dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
library("RMySQL")
ucscDb<-dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
source(http://bioconductor.org/biocLite.R)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library("rdhf5")
library("rhdf5")
?url
prob5 <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
head(prob5)
sum(prob5$v4)
sum(prob5[4])
x<-sum(prob5[4])
y<-sum(prob5[9])
x+y
x
y
sum(prob5[4], na.rm=TRUE)
sum(prob5[4], na.rm=FALSE)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
set.seed(1)
rpois(5, 2)
?rpois
set.seed(1)
rpois(5, 2)
source('~/coursera-R/rprog_scripts_submitscript3.R')
submit()
submit()
submit()
submit()
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
source('~/coursera-R/rankhospital.R')
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
source('~/coursera-R/rankhospital.R')
source('~/coursera-R/rankhospital.R')
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
subset(stateRecs, !is.na(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack), select=colName)
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
source('~/coursera-R/rankhospital.R')
source('~/coursera-R/rankhospital.R')
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
class(values)
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
class(values)
source('~/coursera-R/rankhospital.R')
class(values)
class(rankValues)
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
source('~/.active-rstudio-document')
rankhospital("NY", "heart attack")
source('~/coursera-R/rankhospital.R')
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
ranks
ranks[,1]
str(ranks)
source('~/coursera-R/rankhospital.R')
str(ranks)
rankhospital("NY", "heart attack")
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
rankValues
source('~/coursera-R/rankhospital.R')
rankValues
rankhospital("NY", "heart attack")
source('~/coursera-R/rankhospital.R')
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
stateRecs
source('~/coursera-R/rankhospital.R')
source('~/coursera-R/rankhospital.R')
stateRecs
rankhospital("NY", "heart attack")
source('~/coursera-R/rankhospital.R')
source('~/coursera-R/rankhospital.R')
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
subset(data, sCriteria,  c(Hospital Name, colName ))
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
stateRecs
head(stateRecs)
source('~/coursera-R/rankhospital.R')
rm(list=ls())
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
head(stateRecs)
data <- read.table("outcome-of-care-measures.csv", header=TRUE, sep=",", na.strings="Not Available", stringsAsFactors=FALSE)
message(nrow(data))
## Check that state and outcome are valid
#valid outcomes: "heart attack", "heart failure", or "pneumonia"
outcomeList<-list("heart attack","heart failure","pneumonia")
if (!is.element(outcome, outcomeList)){
stop("invalid outcome")
#return(message("invalid outcome"))
}
stateList<-unique(as.vector(data$State))
if (is.element(state, stateList)){
#do nothing
}else{
#return(message("invalid state"))
stop("invalid state")
}
if (outcome=="heart attack"){
colName<-c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack")
}else if (outcome=="heart failure"){
colName<-c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure")
}else if (outcome=="pneumonia"){
colName<-c("Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
}else{
return(message("problem with outcome mapping"))
}
message(state)
message(colName)
## Return hospital name in that state with the given rank
## 30-day death rate
#get data.frame of rows in state, omitting records that have NA for specified outcome
#get index of column with targeted outcome
colNum<-which(colnames(data)==colName)
sCriteria<-paste0('State=="', state, '" & !is.na("', colName, '")', collapse=NULL)
message(sCriteria)
stateRecs<-data.frame(eval(parse(text= paste0('subset(data,' , sCriteria, ', c(2, ', colNum, '))' ))))
#data[]
message(nrow(stateRecs))
data <- read.table("outcome-of-care-measures.csv", header=TRUE, sep=",", na.strings="Not Available", stringsAsFactors=FALSE)
message(nrow(data))
outcomeList<-list("heart attack","heart failure","pneumonia")
if (!is.element(outcome, outcomeList)){
stop("invalid outcome")
#return(message("invalid outcome"))
}
stateList<-unique(as.vector(data$State))
colName<-c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack")
state<-"NY"
num<-"best"
colNum<-which(colnames(data)==colName)
colNum
sCriteria<-paste0('State=="', state, '" & !is.na("', colName, '")', collapse=NULL)
sCriteria
stateRecs<-data.frame(eval(parse(text= paste0('subset(data,' , sCriteria, ', c(2, ', colNum, '))' ))))
head(stateRecs)
nrow(stateRecs)
stateRecs
sCriteria
sCriteria<-paste0('State=="', state, '" & ', colName, '!="NA")', collapse=NULL)
sCriteria
stateRecs<-data.frame(eval(parse(text= paste0('subset(data,' , sCriteria, ', c(2, ', colNum, '))' ))))
sCriteria<-paste0('State=="', state, '" & ', colName, '!="NA"', collapse=NULL)
stateRecs<-data.frame(eval(parse(text= paste0('subset(data,' , sCriteria, ', c(2, ', colNum, '))' ))))
stateRecs
nrow(stateREcs)
nrow(stateRecs)
stateRecs$rank<-rank(stateRecs[,2], na.last = TRUE, ties.method =  "min")
stateRecs
newDF<-stateRecs[order(stateRecs[2]),]
newDF
stateRecs$rank<-rank(stateRecs[,2], na.last = TRUE, ties.method =  "average")
#re-order the rows based on the outcome value
stateRecs<-stateRecs[order(stateRecs[2]),]
stateRecs
stateRecs$rank<-rank(stateRecs[,2], na.last = TRUE, ties.method =  "random")
#re-order the rows based on the outcome value
stateRecs<-stateRecs[order(stateRecs[2]),]
stateRecs
stateRecs$rank<-rank(stateRecs[,2], na.last = TRUE, ties.method =  "random")
#re-order the rows based on the outcome value
stateRecs<-stateRecs[order(stateRecs[3]),]
stateRecs
stateRecs$rank<-rank(stateRecs[,2], na.last = TRUE, ties.method =  "min")
#re-order the rows based on the outcome value
stateRecs<-stateRecs[order(stateRecs[3]),]
stateRecs
index <- with(stateRecs, order(outcomeValue, name))
stateRecs[index, ]
colnames(stateRecs)<-c(name, outcomeValue)
colnames(stateRecs)<-c("name", "outcomeValue")
index <- with(stateRecs, order(outcomeValue, name))
stateRecs[index, ]
source('~/coursera-R/rankhospital.R')
rankshospital("NY", "heart attack")
rankhospital("NY", "heart attack")
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
stateRecs[1, which(rank==rankNum)]
stateRecs[1, which(rank==1)]
rm(list=ls())
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
rankNum
source('~/coursera-R/rankhospital.R')
rankNum
source('~/coursera-R/rankhospital.R')
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
source('~/coursera-R/rprog_scripts_submitscript3.R')
submit()
source('~/coursera-R/rankhospital.R')
rankhospital("NY", "heart attack")
source('~/coursera-R/rankhospital.R')
submit()
submit()
rankhospital("NC", "heart attack", "worst")
source('~/coursera-R/rankhospital.R')
rankhospital("NC", "heart attack", "worst")
nrow(stateRecs)
## Read outcome data
data <- read.table("outcome-of-care-measures.csv", header=TRUE, sep=",", na.strings="Not Available", stringsAsFactors=FALSE)
# message(nrow(data))
## Check that state and outcome are valid
#valid outcomes: "heart attack", "heart failure", or "pneumonia"
outcomeList<-list("heart attack","heart failure","pneumonia")
if (!is.element(outcome, outcomeList)){
stop("invalid outcome")
#return(message("invalid outcome"))
}
stateList<-unique(as.vector(data$State))
if (is.element(state, stateList)){
#do nothing
}else{
#return(message("invalid state"))
stop("invalid state")
}
if (outcome=="heart attack"){
colName<-c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack")
}else if (outcome=="heart failure"){
colName<-c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure")
}else if (outcome=="pneumonia"){
colName<-c("Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
}else{
return(message("problem with outcome mapping"))
}
#message(state)
#message(colName)
## Return hospital name in that state with the given rank
## 30-day death rate
#get data.frame of rows in state, omitting records that have NA for specified outcome
#get index of column with targeted outcome
colNum<-which(colnames(data)==colName)
#sCriteria<-paste0('State=="', state, '" & !is.na("', colName, '")', collapse=NULL)
sCriteria<-paste0('State=="', state, '" & ', colName, '!="NA"', collapse=NULL)
#message(sCriteria)
stateRecs<-data.frame(eval(parse(text= paste0('subset(data,' , sCriteria, ', c(2, ', colNum, '))' ))))
#message(nrow(stateRecs))
#rename the "hospital name" column so you can refer to it
colnames(stateRecs)<-c("name", "outcomeValue")
#rank the hospitals in the given state for the given outcome
#re-order the rows according to the outcome value and, secondarily, the name of the hospital
index <- with(stateRecs, order(outcomeValue, name))
stateRecs[index, ]
#add a column with the rank to each record
for (i in seq_len(nrow(stateRecs))){
stateRecs$rank=i
}
if(num=="best"){
rankNum<-1
}else if(num=="worst"){
rankNum<-nrow(stateRecs)
}else{
rankNum<-num
}
stateRecs[1, rankNum]
data <- read.table("outcome-of-care-measures.csv", header=TRUE, sep=",", na.strings="Not Available", stringsAsFactors=FALSE)
outcomeList<-list("heart attack","heart failure","pneumonia")
outcome=="heart attack"
colName<-c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack")
state<-"NC"
colNum<-which(colnames(data)==colName)
#sCriteria<-paste0('State=="', state, '" & !is.na("', colName, '")', collapse=NULL)
sCriteria<-paste0('State=="', state, '" & ', colName, '!="NA"', collapse=NULL)
#message(sCriteria)
stateRecs<-data.frame(eval(parse(text= paste0('subset(data,' , sCriteria, ', c(2, ', colNum, '))' ))))
colnames(stateRecs)<-c("name", "outcomeValue")
index <- with(stateRecs, order(outcomeValue, name))
stateRecs[index, ]
num<-"worst"
if(num=="best"){
rankNum<-1
}else if(num=="worst"){
rankNum<-nrow(stateRecs)
}else{
rankNum<-num
}
stateRecs[1, rankNum]
rankNum
nrow(stateRecs)
stateRecs[83]
stateRecs[[83]]
stateRecs[[1, 83]]
stateRecs[1, 83]
stateRecs[1, 80]
stateRecs[1,]
stateRecs[83,]
stateRecs
source('~/coursera-R/rankhospital.R')
rankhospital("NC", "heart attack", "worst")
stateRecs
index <- with(stateRecs, order(outcomeValue, name))
stateRecs[index, ]
stateRecs[rankNum, 1]
rankNum
rm(list=ls())
source('~/coursera-R/rankhospital.R')
rankhospital("NC", "heart attack", "worst")
source('~/coursera-R/rprog_scripts_submitscript3.R')
submit()
submit()
submit()
submit()
source('~/coursera-R/rankall.R')
source('~/coursera-R/rankall.R')
source('~/coursera-R/rankall.R')
source('~/coursera-R/rankall.R')
source('~/coursera-R/rankall.R')
rankall("heart attack", "3")
data <- read.table("outcome-of-care-measures.csv", header=TRUE, sep=",", na.strings="Not Available", stringsAsFactors=FALSE)
# message(nrow(data))
## Check that state outcome is valid
#valid outcomes: "heart attack", "heart failure", or "pneumonia"
outcomeList<-list("heart attack","heart failure","pneumonia")
if (!is.element(outcome, outcomeList)){
stop("invalid outcome")
#return(message("invalid outcome"))
}
stateList<-unique(as.vector(data$State))
stateList
seq_len(stateList)
nrow(stateList)
str(stateList)
len(stateList)
class(stateList)
length(stateList)
source('~/coursera-R/rankall.R')
source('~/coursera-R/rankall.R')
rankall("heart attack", "3")
source('~/coursera-R/rankall.R')
rankall("heart attack", "3")
rm(list=ls())
data <- read.table("outcome-of-care-measures.csv", header=TRUE, sep=",", na.strings="Not Available", stringsAsFactors=FALSE)
outcomeList<-list("heart attack","heart failure","pneumonia")
outcome<-"heart attack"
stateList<-unique(as.vector(data$State))
if (outcome=="heart attack"){
colName<-c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack")
}else if (outcome=="heart failure"){
colName<-c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure")
}else if (outcome=="pneumonia"){
colName<-c("Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
}else{
return(message("problem with outcome mapping"))
}
num<-3
colNum<-which(colnames(data)==colName)
if(num=="best"){
rankNum<-1
}else if(num=="worst"){
rankNum<-nrow(stateRecs)
}else{
rankNum<-num
}
output <- data.frame(Name=character(), State=character(), stringsAsFactors=FALSE)
for (i in 1:length(stateList)){
state<-stateList[i]
sCriteria<-paste0('State=="', state, '" & ', colName, '!="NA"', collapse=NULL)
stateRecs<-data.frame(eval(parse(text= paste0('subset(data,' , sCriteria, ', c(2, ', colNum, '))' ))))
#re-order the rows according to the outcome value and, secondarily, the name of the hospital
colnames(stateRecs)<-c("name", "outcomeValue")
index <- with(stateRecs, order(outcomeValue, name))
stateRecs<-stateRecs[index, ]
output[1,]<-stateRecs[rankNum, 1]
}
output
state
sCriteria
stateRecs
rankNum
rbind(output, stateRecs)
output[1,]<-c(stateRecs[rankNum, 1], state)
output
output[1,]<-c(stateRecs[rankNum, 2], state)
output
source('~/.active-rstudio-document')
source('~/coursera-R/rankall.R')
rankall("heart attack", "3")
source('~/coursera-R/rankall.R')
source('~/coursera-R/rankall.R')
rankall("heart attack", "3")
stateRecs
source('~/coursera-R/rankall.R')
source('~/coursera-R/rankall.R')
rankall("heart attack", "3")
parse(text= paste0('subset(data,' , sCriteria, ', c(2, ', colNum, '))' )
)
rankall("heart attack", 1)
rankall("heart attack", 3)
rankall("heart attack", 100)
source('~/coursera-R/rankall.R')
rankall("heart attack", 100)
source('~/coursera-R/rankall.R')
source('~/coursera-R/rprog_scripts_submitscript3.R')
submit()
source('~/coursera-R/rankall.R')
submit()
source('~/coursera-R/rankall.R')
source('~/coursera-R/rankall.R')
submit()
submit()
source('~/coursera-R/rankall.R')
source('~/coursera-R/rankall.R')
submit()
submit()
source('~/coursera-R/rankall.R')
data<-data.table(read.table("household_power_consumption.txt", header=TRUE, sep = ";", na.strings="?"))
data<-data[data$Date=="1/2/2007" | data$Date=="2/2/2007", ]
library("data.table")
data<-data.table(read.table("household_power_consumption.txt", header=TRUE, sep = ";", na.strings="?"))
data<-data[data$Date=="1/2/2007" | data$Date=="2/2/2007", ]
data<-data.table(read.table("household_power_consumption.txt", header=TRUE, sep = ";", na.strings="?"))
data<-data[data$Date=="1/2/2007" | data$Date=="2/2/2007", ]
x<-1:4
mean(x)
install.packages("knitr")
setwd("~/Coursera-ReproducibleResearch/Project1")
data<-read.csv("activity.csv")
setwd("~/Coursera-ReproducibleResearch/RepData_PeerAssessment1")
data<-read.csv("activity.csv")
